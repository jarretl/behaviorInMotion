import array
import math
import audiobusio
import board
import neopixel
import audioio
import digitalio
import time
import pulseio
import random
from adafruit_motor import servo
from random import randint
from random import randrange, uniform
#-----------------------------------------------------------------------------------------------------------#
# Restrict value to be between floor and ceiling.
def constrain(value, floor, ceiling):
    return max(floor, min(value, ceiling))

# Scale input_value between output_min and output_max, exponentially.
def log_scale(input_value, input_min, input_max, output_min, output_max):
    normalized_input_value = (input_value - input_min) / (input_max - input_min)
    return output_min + math.pow(normalized_input_value, SCALE_EXPONENT) * (output_max - output_min)

# Remove DC bias before computing RMS.
def normalized_rms(values):
    minbuf = int(mean(values))
    samples_sum = sum(
        float(sample - minbuf) * (sample - minbuf)
        for sample in values)
    return math.sqrt(samples_sum / len(values))

def mean(values):
    return sum(values) / len(values)

def volume_color(volume):
    return 200, volume * (255 // NUM_PIXELS), 0
    
def optionOne():
    print("number 1")
    time.sleep(pauseTime)
    servo1.angle = 60
    time.sleep(.1)
    servo1.angle = 70
    time.sleep(.1)
    servo1.angle = 60
    time.sleep(1)
    
def optionTwo():
    print("number 2")
    time.sleep(pauseTime)
    servo1.angle = 80
    time.sleep(.5)
    servo1.angle = 70
    time.sleep(1)

def optionThree():
    print("number 3")
    time.sleep(pauseTime)
    servo1.angle = 100
    time.sleep(.7)
    servo1.angle = 90
    time.sleep(1)
    
def optionFour():
    print("number 4")
    time.sleep(pauseTime)
    servo1.angle = 90
    time.sleep(1.2)
    
def headShake():
    servo1.angle = 80
    time.sleep(.1)
    servo1.angle = 50 
    time.sleep(.1)
    
    
#-----------------------------------------------------------------------------------------------------------#

# Exponential scaling factor.
# Should probably be in range -10 .. 10 to be reasonable.
CURVE = 2
SCALE_EXPONENT = math.pow(10, CURVE * -0.1)
 
# Number of samples to read at once.
NUM_SAMPLES = 160

# Main program
mic = audiobusio.PDMIn(board.MICROPHONE_CLOCK, board.MICROPHONE_DATA, sample_rate=16000, bit_depth=16)
 
# Record an initial sample to calibrate. Assume it's quiet when we start.
samples = array.array('H', [0] * NUM_SAMPLES)
mic.record(samples, len(samples))

# Set lowest level to expect, plus a little.
input_floor = normalized_rms(samples) + 10
# OR: used a fixed floor
# input_floor = 50
 
# You might want to print the input_floor to help adjust other values.
#print(input_floor)
 
# Corresponds to sensitivity: lower means more pixels light up with lower sound
# Adjust this as you see fit.
input_ceiling = input_floor + 50

# create a PWMOut object on Pin A1.
pwm = pulseio.PWMOut(board.A1, duty_cycle=2 ** 15, frequency=50)

# Create a servo object, servo1.
servo1 = servo.Servo(pwm, min_pulse=620, max_pulse=2320)

patCounter = 0
ranChoice = random.randint(1,4)
#-----------------------------------------------------------------------------------------------------------#
while True:
    # Getting the mic and the magnitude
    mic.record(samples, len(samples))
    magnitude = normalized_rms(samples)
    
    # Compute scaled logarithmic reading in the range 0 to NUM_PIXELS
    soundLevel = log_scale(constrain(magnitude, input_floor, input_ceiling),
                  input_floor, input_ceiling, 0, 10)
    pauseTime = 1
                  
    if (soundLevel > 3) and (patCounter < 10):
        print (soundLevel)
        if (ranChoice == 1):
            optionOne()
        elif (ranChoice == 2):
            optionTwo()
        elif (ranChoice == 3):
            optionThree()
        elif (ranChoice == 4):
            optionFour()
        last = ranChoice
        while (last == ranChoice):
            ranChoice = random.randint(1,4)
        patCounter +=  1       
        print(patCounter)
    elif (soundLevel > 3) and (patCounter >= 10):
        for i in range(0, 20):
            headShake()
        patCounter = 0
            
    if (soundLevel <= 3):
        print("i hear nothing", soundLevel)
        time.sleep(1)
